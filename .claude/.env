# Claude DevOps Agents Environment Configuration
# Copy or rename this file to .env and fill in your actual values
# NEVER commit this file with real credentials to version control

# ============================================
# Version Control & Collaboration
# ============================================

# GitHub - Required for GitHub MCP server
# Get token at: https://github.com/settings/tokens
GITHUB_TOKEN=your_github_personal_access_token_here

# GitLab - Required for GitLab MCP server  
# Get token at: https://gitlab.com/-/profile/personal_access_tokens
GITLAB_TOKEN=your_gitlab_personal_access_token_here
GITLAB_API_URL=https://gitlab.com/api/v4

# ============================================
# Cloud Providers
# ============================================

# AWS - Required for AWS CLI MCP server
# Method 1: Use AWS SSO (Recommended for organizations)
# Configure with: aws configure sso
# This will use credentials from ~/.aws/config and ~/.aws/sso/cache
AWS_PROFILE=default  # Or your SSO profile name like 'dev', 'prod', etc.
AWS_REGION=us-east-1

# Method 2: Use static credentials (for service accounts/CI)
# Configure with: aws configure
# Comment out if using SSO
AWS_ACCESS_KEY_ID=your_aws_access_key_here
AWS_SECRET_ACCESS_KEY=your_aws_secret_key_here
# Optional: For temporary credentials
AWS_SESSION_TOKEN=

# Method 3: Use AWS config file directly
# The AWS SDK will automatically look for credentials in this order:
# 1. Environment variables (AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY)
# 2. Shared credentials file (~/.aws/credentials)
# 3. AWS config file (~/.aws/config) for SSO profiles
# 4. IAM role (if running on EC2/ECS/Lambda)
AWS_CONFIG_FILE=~/.aws/config
AWS_SHARED_CREDENTIALS_FILE=~/.aws/credentials

# SSO-specific settings (optional)
AWS_SSO_START_URL=https://your-org.awsapps.com/start
AWS_SSO_REGION=us-east-1
AWS_SSO_ACCOUNT_ID=123456789012
AWS_SSO_ROLE_NAME=YourRoleName

# ============================================
# Container & Orchestration
# ============================================

# Docker - Local Docker daemon should be running
# No credentials needed for local Docker

# Kubernetes - Required for Kubernetes MCP server
# Usually at ~/.kube/config
KUBECONFIG=~/.kube/config
K8S_CONTEXT=default
K8S_NAMESPACE=default

# ============================================
# Databases
# ============================================

# PostgreSQL - Required for PostgreSQL MCP server
# Format: postgresql://username:password@host:port/database
POSTGRES_CONNECTION_STRING=postgresql://postgres:password@localhost:5432/mydb

# Alternative PostgreSQL configuration
POSTGRES_HOST=localhost
POSTGRES_PORT=5432
POSTGRES_DB=mydb
POSTGRES_USER=postgres
POSTGRES_PASSWORD=password

# ============================================
# Container Registries (Optional)
# ============================================

# Docker Hub
DOCKER_USERNAME=your_dockerhub_username
DOCKER_PASSWORD=your_dockerhub_password

# AWS ECR
ECR_REGISTRY=123456789.dkr.ecr.us-east-1.amazonaws.com
ECR_REPOSITORY=your-repo-name

# ============================================
# CI/CD Platforms (Optional)
# ============================================

# Jenkins
JENKINS_URL=https://jenkins.example.com
JENKINS_USER=your_jenkins_username
JENKINS_API_TOKEN=your_jenkins_api_token

# ============================================
# Security & Secrets Management (Optional)
# ============================================

# HashiCorp Vault
VAULT_ADDR=https://vault.example.com:8200
VAULT_TOKEN=your_vault_token
VAULT_NAMESPACE=admin

# AWS Secrets Manager is accessed via AWS credentials above

# ============================================
# Monitoring & Observability (Optional)
# ============================================

# Datadog
DATADOG_API_KEY=your_datadog_api_key
DATADOG_APP_KEY=your_datadog_app_key

# Prometheus
PROMETHEUS_URL=http://prometheus.example.com:9090

# Grafana
GRAFANA_URL=http://grafana.example.com:3000
GRAFANA_API_KEY=your_grafana_api_key

# ============================================
# Infrastructure as Code (Optional)
# ============================================

# Terraform Cloud
TF_CLOUD_TOKEN=your_terraform_cloud_token
TF_WORKSPACE=default
TF_STATE_BUCKET=terraform-state-bucket

# Pulumi
PULUMI_ACCESS_TOKEN=your_pulumi_token

# ============================================
# Communication & Alerting (Optional)
# ============================================

# Slack
SLACK_WEBHOOK_URL=https://hooks.slack.com/services/YOUR/WEBHOOK/URL
SLACK_API_TOKEN=xoxb-your-token

# PagerDuty
PAGERDUTY_API_KEY=your_pagerduty_api_key

# ============================================
# Application Settings
# ============================================

# Environment
ENVIRONMENT=development
DEBUG=false
LOG_LEVEL=info

# ============================================
# MCP Server Settings
# ============================================

# These are used by various MCP servers
# Most are optional and have defaults

# File paths for MCP servers
MCP_DATA_DIR=~/.claude/data
MCP_LOGS_DIR=~/.claude/logs
MCP_CACHE_DIR=~/.claude/cache

# Timeouts and limits
MCP_TIMEOUT=30000
MCP_MAX_RETRIES=3

# ============================================
# Notes
# ============================================

# 1. Only fill in the values you actually need
# 2. Most MCP servers work without configuration
# 3. GitHub/GitLab tokens are only needed for private repos
# 4. AWS credentials can also be configured via AWS CLI
# 5. Kubernetes config usually auto-detects from ~/.kube/config
# 6. PostgreSQL is only needed if you plan to use it
# 7. Never share or commit this file with real values